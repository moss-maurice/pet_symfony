# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    exceptions:
        Symfony\Component\HttpKernel\Exception\NotFoundHttpException: { code: 404 }
        App\Exception\RequestBodyConvertException: { code: 400, hidden: false }
        App\Exception\UserAlreadyExistsException: { code: 409, hidden: false }
        App\Exception\UserNotCreatedException: { code: 400, hidden: false }
        App\Exception\ProductNotFountException: { code: 404, hidden: false }
        App\Exception\InvalidJsonException: { code: 400, hidden: false }
        App\Exception\BasketProductAlreadyExistsException: { code: 409, hidden: false }
        App\Exception\BasketProductsLimitReachedException: { code: 400, hidden: false }
        App\Exception\BasketProductNotFoundException: { code: 404, hidden: false }
        App\Exception\BasketItemNotFoundException: { code: 404, hidden: false }
        App\Exception\EmptyBasketException: { code: 404, hidden: false }
        App\Exception\ShipmentMethodNotFoundException: { code: 404, hidden: false }
        App\Exception\OrderNotFoundException: { code: 404, hidden: false }
        App\Exception\UserAlreadyLoggedException: { code: 409, hidden: false }
        App\Exception\StatusNotFoundException: { code: 404, hidden: false }

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            #    bool $isDebug: "%kernel.debug%"
            bool $isDebug: false

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: "../src/"
        exclude:
            - "../src/DependencyInjection/"
            - "../src/Entity/"
            - "../src/Kernel.php"

    app.normalizer.object_normalizer:
        class: Symfony\Component\Serializer\Normalizer\ObjectNormalizer
        tags: ["serialize.normalizer"]
        arguments:
            $defaultContext:
                circular_reference_handler: '@App\Serializer\CircularReferenceHandler'
                ignored_attributes: ["insertedOn", "updatedOn"]

    App\Exception\Handler\ExceptionMappingResolver:
        arguments: ["%exceptions%"]

    App\EventListener\OnJwtCreatedListener:
        tags:
            - { name: "kernel.event_listener", event: "lexik_jwt_authentication.on_jwt_created" }

    App\EventListener\OnExceptionListener:
        tags:
            - { name: "kernel.event_listener", event: "kernel.exception", priority: 10 }

    App\EventListener\OnValidationExceptionListener:
        tags:
            - { name: "kernel.event_listener", event: "kernel.exception", priority: 15 }

    App\EventListener\UserOnRegisteredListener:
        tags:
            - { name: "kernel.event_listener", event: "user.registered" }

    App\EventListener\UserOnDeletedListener:
        tags:
            - { name: "kernel.event_listener", event: "user.deleted" }

    App\EventListener\ProductOnCreatedListener:
        tags:
            - { name: "kernel.event_listener", event: "product.created" }

    App\EventListener\BasketOnAddedListener:
        tags:
            - { name: "kernel.event_listener", event: "basket.added" }

    App\EventListener\BasketOnUpdatedListener:
        tags:
            - { name: "kernel.event_listener", event: "basket.updated" }

    App\EventListener\BasketOnDeletedListener:
        tags:
            - { name: "kernel.event_listener", event: "basket.deleted" }

    App\EventListener\BasketOnDropedListener:
        tags:
            - { name: "kernel.event_listener", event: "basket.droped" }

    App\EventListener\OrderItemOnAddedListener:
        tags:
            - { name: "kernel.event_listener", event: "orderItem.added" }

    App\EventListener\OrderOnCreatedListener:
        tags:
            - { name: "kernel.event_listener", event: "order.created" }

    App\EventListener\OrderOnUpdatedListener:
        tags:
            - { name: "kernel.event_listener", event: "order.updated" }

    App\Service\BasketService:
        arguments:
            $repository: '@App\Repository\BasketRepository'
            $parameterBag: "@parameter_bag"
            $entityManager: "@doctrine.orm.entity_manager"
            $eventDispatcher: "@event_dispatcher"

    App\Service\KafkaService:
        arguments:
            $parameterBag: "@parameter_bag"

    App\Service\OrderService:
        arguments:
            $orderRepository: '@App\Repository\OrderRepository'
            $orderProductRepository: '@App\Repository\OrderProductRepository'
            $orderStatusRepository: '@App\Repository\OrderStatusRepository'
            $entityManager: "@doctrine.orm.entity_manager"
            $eventDispatcher: "@event_dispatcher"

    App\Service\OrderShipmentMethodService:
        arguments:
            $repository: '@App\Repository\OrderShipmentMethodRepository'

    App\Service\OrderStatusService:
        arguments:
            $repository: '@App\Repository\OrderStatusRepository'

    App\Service\ProductService:
        arguments:
            $repository: '@App\Repository\ProductRepository'
            $fakerService: '@App\Service\FakerService'
            $entityManager: "@doctrine.orm.entity_manager"
            $serializer: "@serializer"
            $eventDispatcher: "@event_dispatcher"

    App\Service\UserService:
        arguments:
            $repository: '@App\Repository\UserRepository'
            $tokenStorage: "@security.token_storage"
            $passwordHasher: "@security.user_password_hasher"
            $entityManager: "@doctrine.orm.entity_manager"
            $eventDispatcher: "@event_dispatcher"

    App\Service\Http\BasketHttpService:
        arguments:
            $service: '@App\Service\BasketService'
            $productService: '@App\Service\ProductService'
            $parameterBag: "@parameter_bag"
            $serializer: "@serializer"
            $eventDispatcher: "@event_dispatcher"

    App\Service\Http\OrderHttpService:
        arguments:
            $service: '@App\Service\OrderService'
            $basketService: '@App\Service\BasketService'
            $orderShipmentMethodService: '@App\Service\OrderShipmentMethodService'
            $orderStatusService: '@App\Service\OrderStatusService'
            $serializer: "@serializer"
            $eventDispatcher: "@event_dispatcher"

    App\Service\Http\OrderShipmentMethodHttpService:
        arguments:
            $service: '@App\Service\OrderShipmentMethodService'
            $serializer: "@serializer"

    App\Service\Http\OrderStatusHttpService:
        arguments:
            $service: '@App\Service\OrderStatusService'
            $serializer: "@serializer"

    App\Service\Http\ProductHttpService:
        arguments:
            $service: '@App\Service\ProductService'
            $serializer: "@serializer"

    App\Service\Http\UserHttpService:
        arguments:
            $service: '@App\Service\UserService'
            $eventDispatcher: "@event_dispatcher"

    App\Service\Console\ConsumeService:
        arguments:
            $kafkaService: '@App\Service\KafkaService'
            $orderService: '@App\Service\OrderService'
            $orderStatusService: '@App\Service\OrderStatusService'
            $productService: '@App\Service\ProductService'
            $serializer: "@serializer"

    App\Service\Console\ProduceService:
        arguments:
            $kafkaService: '@App\Service\KafkaService'
            $productService: '@App\Service\ProductService'
            $serializer: "@serializer"

    App\Service\Console\UsersService:
        arguments:
            $orderService: '@App\Service\OrderService'
            $orderShipmentMethodService: '@App\Service\OrderShipmentMethodService'
            $userService: '@App\Service\UserService'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
